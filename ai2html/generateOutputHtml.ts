// Wrap content HTML in a <div>, add styles and resizer script, write to a file

import { getGroupContainerId } from "./ArtboardUtils"
import { ai2HTMLSettings, ArtboardGroupForOutput, outputData } from "./types"
import { isTrue } from "../common/booleanUtils"
import makeResizerScript from "./makeResizerScript"
import getDateTimestamp from "../common/getDateTimestamp"
import { encodeHtmlEntities } from "../common/stringUtils"
import generatePageCss from "./generatePageCss"
import applyTemplate from "../common/applyTemplate"

export default function generateOutputHtml(
	content: outputData,
	group: ArtboardGroupForOutput,
	settings: ai2HTMLSettings,
	nameSpace: string,
	doc: Document,
	scriptVersion: string,
	pageName: string
) {
	const linkSrc = settings.clickable_link || ""
	let responsiveJs = ""
	const containerId = getGroupContainerId(nameSpace, pageName)
	const altTextId = containerId + "-img-desc"
	var textForFile, html, js, css, commentBlock
	var containerClasses: string[] = ["ai2html"]

	// accessibility features
	// prettier-ignore
	const ariaAttrs = `${settings.aria_role ? `role="${settings.aria_role}"` : ""} ${settings.alt_text ? ` aria-describedby="${altTextId}"` : ""}`

	if (
		isTrue(settings.include_resizer_script) &&
		// resizer CSS overrides the script setting
		!isTrue(settings.include_resizer_css)
	) {
		responsiveJs = makeResizerScript(containerId, nameSpace)
		containerClasses.push("ai2html-responsive")
	}

	// prettier-ignore
	commentBlock = `<!-- Generated by ai2html v${scriptVersion} - ${getDateTimestamp()} -->
<!-- ai file: ${doc.name} -->${settings.preview_slug ? `\n<!-- preview: ${settings.preview_slug} -->` : ""}
${settings.scoop_slug_from_config_yml ? `\n<!-- scoop: ${settings.scoop_slug_from_config_yml} -->` : ""}`

	// HTML
	html = `<div id="${containerId}" class="${containerClasses}" ${ariaAttrs}>`

	if (settings.alt_text) {
		html +=
			'<div class="' +
			nameSpace +
			'aiAltText" id="' +
			altTextId +
			'">' +
			encodeHtmlEntities(settings.alt_text) +
			"</div>"
	}
	if (linkSrc) {
		// optional link around content
		html += '\t<a class="' + nameSpace + 'ai2htmlLink" href="' + linkSrc + '">\r'
	}
	html += content.html
	if (linkSrc) {
		html += "\t</a>\r"
	}
	html += "</div>\r"

	// CSS
	css = `<style media="screen,print">
${generatePageCss(containerId, group, settings, nameSpace)}
${content.css}</style>`

	textForFile = `${commentBlock}${css}${html}${content.js}${responsiveJs}
<!-- End ai2html ${getDateTimestamp()} - ${getDateTimestamp()} -->`

	textForFile = applyTemplate(textForFile, settings)
	return textForFile
}
