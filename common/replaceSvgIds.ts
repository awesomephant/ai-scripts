import { contains } from "./arrayUtils"
/**
 * Replace IDs generated by Illustrator with IDs that are as close as possible to
 * the original names of objects in the document.
 * @param svg
 * @param prefix optional namespace string (to avoid collisions with other IDs on the page)
 * @returns
 */

export default function replaceSvgIds(
	svg: string,
	prefix: string = "",
	onduplicate?: (dupes: string[]) => void
) {
	let ids: string[] = []
	const idRxp = /id="([^"]+)_[0-9]+_"/g // matches IDs generated by AI
	const hexRxp = /_x([1-7][0-9A-F])_/g // matches char codes inserted by AI
	let dupes: string[] = []

	//@ts-expect-error replace does take a function argument
	svg = svg.replace(idRxp, replaceId)

	if (dupes.length > 0 && onduplicate) {
		onduplicate(dupes)
	}

	return svg

	function replaceId(_: string, id: string): string {
		//@ts-expect-error replace does take a function argument
		var fixedId = id.replace(hexRxp, replaceHexCode)
		var uniqId = uniqify(fixedId)
		return 'id="' + prefix + uniqId + '" data-name="' + fixedId + '"'
	}

	function replaceHexCode(_: string, hex: string) {
		return String.fromCharCode(parseInt(hex, 16))
	}

	// resolve ID collisions by appending a string
	function uniqify(id: string) {
		let n = 1
		let newId = id
		while (contains(ids, newId)) {
			n += 1
			newId = `${id}-${n}`
		}
		if (n == 2) {
			dupes.push(id)
		}
		ids.push(newId)
		return newId
	}
}
